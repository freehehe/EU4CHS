#include "functions.h"
#include "eu4.h"
#include "../include/utf8cpp/utf8.h"
#include "../include/injector/hooking.hpp"
#include <cctype>
#include <vector>
#include <string_view>
#include <iterator>

static const uint8 convert_table[256] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x3f, 0x81, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x8d, 0x3f, 0x8f,
	0x90, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x9d, 0x3f, 0x3f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

void __fastcall CGlobalFunctions::ConvertUTF8ToLatin1(const char *source, char *dest)
{
	static std::vector<uint32> u32sequence;	

	std::string_view source_view(source);
	u32sequence.clear();
	utf8::unchecked::utf8to32(source_view.begin(), source_view.end(), std::back_inserter(u32sequence));

	for (uint32 &cp : u32sequence)
	{
		if (cp < 256)
		{
			cp = convert_table[cp];
		}
		else
		{
			switch (cp)
			{
			case 0x00000152: cp = 0x8c; break;
			case 0x00000153: cp = 0x9c; break;
			case 0x00000160: cp = 0x8a; break;
			case 0x00000161: cp = 0x9a; break;
			case 0x00000178: cp = 0x9f; break;
			case 0x0000017d: cp = 0x8e; break;
			case 0x0000017e: cp = 0x9e; break;
			case 0x00000192: cp = 0x83; break;
			case 0x000002c6: cp = 0x88; break;
			case 0x000002dc: cp = 0x98; break;
			case 0x00002013: cp = 0x96; break;
			case 0x00002014: cp = 0x97; break;
			case 0x00002018: cp = 0x91; break;
			case 0x00002019: cp = 0x92; break;
			case 0x0000201a: cp = 0x82; break;
			case 0x0000201c: cp = 0x93; break;
			case 0x0000201d: cp = 0x94; break;
			case 0x0000201e: cp = 0x84; break;
			case 0x00002020: cp = 0x86; break;
			case 0x00002021: cp = 0x87; break;
			case 0x00002022: cp = 0x95; break;
			case 0x00002026: cp = 0x85; break;
			case 0x00002030: cp = 0x89; break;
			case 0x00002039: cp = 0x8b; break;
			case 0x0000203a: cp = 0x9b; break;
			case 0x000020ac: cp = 0x80; break;
			case 0x00002122: cp = 0x99; break;
			default: break;
			}
		}
	}

	u32sequence.push_back(0);
	utf8::utf32to8(u32sequence.begin(), u32sequence.end(), dest);
}

bool CGlobalFunctions::IsNativeCharacter(uint32 cp)
{
	return cp <= 0xFF;
}

bool CGlobalFunctions::IsTextIconChar(uint32 cp)
{
	return isalpha(cp) || isdigit(cp) || cp == '_' || cp == '|';
}

void CGlobalFunctions::Patch()
{
	injector::MakeJMP(game.pfConvertUTF8ToLatin1, ConvertUTF8ToLatin1);
}
